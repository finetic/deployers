---
name: Deploy Statamic Site

on:
  workflow_call:
    inputs:
      stage:
        description: Which stage to run (test_backend|test_frontend|build|deploy)
        required: true
        type: string
      site_name:
        required: true
        type: string
      git_user_name:
        required: true
        type: string
      git_repo_url:
        required: true
        type: string
      server:
        required: true
        type: string
      php_versions:
        required: false
        type: string
        default: '["8.3"]'

env:
  IMAGE_REGISTRY: docker.finetic.dev

jobs:
  test-backend:
    if: ${{ inputs.stage == 'test_backend' }}
    name: Test Backend (PHP ${{ matrix.php-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php-version: ${{ fromJson(inputs.php_versions) }}

    steps:
      - name: 🧾 Checkout Code
        uses: actions/checkout@v4

      - name: 🧪 Setup PHP ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          tools: phpunit-bridge
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pgsql, gd, exif, amqp

      - name: 💾 Restore Composer Cache
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: composer-

      - name: Setup COMPOSER_AUTH
        run: |
          mkdir -p ~/.config/composer
          echo "$COMPOSER_AUTH" > ~/.config/composer/auth.json
        env:
          COMPOSER_AUTH: ${{ secrets.COMPOSER_AUTH }}

      - name: Upgrade Composer
        run: composer self-update

      - name: 📦 Install Composer Dependencies
        run: |
          composer install --no-interaction --no-progress --prefer-dist -o

      - name: 🔍 Run PHP Linter (phpcs)
        run: php vendor/bin/phpcs

      - name: 🧠 Run PHPStan
        run: php vendor/bin/phpstan

  test-frontend:
    if: ${{ inputs.stage == 'test_frontend' }}
    name: Test Frontend
    runs-on: ubuntu-latest
    steps:
      - name: 🧾 Checkout Code
        uses: actions/checkout@v4

      - name: 🧪 Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.13'

      - name: 💾 Restore NPM Cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: npm-

      - name: 📦 Install NPM Dependencies
        run: npm clean-install

      - name: 🔐 Run NPM Audit
        run: npm audit signatures

      - name: 🔍 Run Frontend Linter
        run: npm run lint

      - name: 🛠️ Build Frontend Assets
        run: npm run build

  build:
    if: ${{ inputs.stage == 'build' }}
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    env:
      IMAGE_NAME: statamic-${{ inputs.site_name }}
      GIT_USER_NAME: ${{ inputs.git_user_name }}
      DOCKER_IMAGE_TAG: ${{ github.ref == 'refs/heads/main' && 'production' || 'acceptance' }}
      DOCKER_DIRECTORY: ${{ github.ref == 'refs/heads/main'
        && format('{0}-website/{0}-prod', inputs.site_name)
        || format('{0}-website/{0}-acc', inputs.site_name) }}

    steps:
      - name: 🧾 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Git SSH Config
        run: |
          git config --global user.name "$GIT_USER_NAME"
          git config --global user.email "$GIT_USER_NAME@finetic.nl"
          git config --global core.sshCommand "ssh -o StrictHostKeyChecking=accept-new"
          git remote set-url origin ${{ inputs.git_repo_url }}

      - name: ⚙️ Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Docker Login to Nexus Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ secrets.nexus_docker_username }}
          password: ${{ secrets.nexus_docker_password }}

      - name: 💾 Restore Docker Build Cache
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: buildx-${{ github.sha }}
          restore-keys: buildx-

      - name: 🏗️ Build & Push Docker Image
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --push \
            --label "vendor=Finetic" \
            --build-arg GIT_REVISION=${GITHUB_SHA} \
            --build-arg GIT_USER_NAME=$GIT_USER_NAME \
            --build-arg GIT_PRIVATE_SSH_KEY="${{ secrets.git_private_ssh_key }}" \
            -t "$IMAGE_REGISTRY/finetic/websites/${{ env.IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}" \
            --file docker/prod/Dockerfile \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache-new

      - name: 📦 Save Docker Build Cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: build
    if: ${{ inputs.stage == 'deploy' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/acceptance') }}

    steps:
      - name: 🔑 Setup SSH Key
        run: |
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          echo "${{ secrets.deployment_key }}" > ~/.ssh/id_ed25519 && chmod 600 ~/.ssh/id_ed25519

      - name: 🚀 Deploy via SSH
        run: |
          ssh -o StrictHostKeyChecking=accept-new -i ~/.ssh/id_ed25519 deployment@${{ inputs.server }} "
            docker compose -f /opt/docker/${{ env.DOCKER_DIRECTORY }}/docker-compose.yml pull &&
            docker compose -f /opt/docker/${{ env.DOCKER_DIRECTORY }}/docker-compose.yml up -d \
            --pull always --no-deps \
          "
