---
name: Version & Tagging

on:
  workflow_call:

jobs:
  tag_and_changelog:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GIT_PRIVATE_SSH_KEY || github.token }}

      - name: Setup Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git config lfs.${{ steps.repo.outputs.url }}/info/lfs.locksverify true

      - name: Fetch full git history (for push validation)
        if: github.event_name == 'push'
        run: git fetch --prune --unshallow || echo "Already complete history"

      - name: Validate semantic commits (pull request)
        if: github.event_name == 'pull_request'
        uses: amannn/action-semantic-pull-request@v5
        with:
          types: |
            feat
            fix
            chore
            docs
            refactor
            style
            test

      - name: Get version from VERSION file
        id: version
        run: |
          if [ ! -f VERSION ]; then
            echo "❌ VERSION file not found!"
            exit 1
          fi
          VERSION=$(cat VERSION | tr -d '\n')
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ VERSION must be in format x.y.z"
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if tag already exists
        run: |
          git fetch --tags --prune
          TAG="v${{ steps.version.outputs.version }}"
          if git rev-parse "${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
            echo "❌ Tag ${{ steps.version.outputs.version }} already exists!"
            exit 1
          fi

      - name: Ensure CHANGELOG.md exists
        run: |
          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
          fi

      - name: Generate changelog (newest first, semver, skip '[skip ci]')
        run: |
          set -euo pipefail

          V="v${{ steps.version.outputs.version }}"
          DATE="$(date '+%Y-%m-%d')"

          # Bepaal bereik sinds vorige tag (excl. vorige tag, incl. HEAD)
          PREV_TAG="$(git describe --tags --abbrev=0 2>/dev/null || true)"
          RANGE="${PREV_TAG:+${PREV_TAG}..}HEAD"

          # 1) Bouw nieuwe sectie bovenaan
          {
            echo "# Changelog"
            echo
            echo "## ${V} - ${DATE}"
            git log --no-merges --pretty=format:"- %s" ${RANGE} | grep -vi '\[skip ci\]' || true
            echo
          } > CHANGELOG.new

          # 2) Pak oude secties en sorteer ze semver (nieuw -> oud)
          if [ -f CHANGELOG.md ]; then
            # Sla hoofdkop (# Changelog) over
            tail -n +2 CHANGELOG.md > _old.md || true

            # Schrijf elke bestaande sectie naar eigen bestand, op basis van '## vX.Y.Z - ...'
            # Bestandsnaam wordt section_X.Y.Z.md (zonder 'v'), zodat sort -V werkt.
            awk '
              /^## v[0-9]+\.[0-9]+\.[0-9]+/ {
                if (out) close(out);
                ver=$2; gsub(/^v/,"",ver);
                out=sprintf("section_%s.md", ver);
              }
              { if (out) print > out }
            ' _old.md

            # Concateneer alle sectie-bestanden in semantische volgorde (hoog -> laag)
            ls section_*.md 2>/dev/null \
              | sed -E 's#^section_(.*)\.md$#\1#' \
              | sort -Vr \
              | while read -r ver; do
                  cat "section_${ver}.md"
                  echo
                done >> CHANGELOG.new

            rm -f _old.md section_*.md
          fi

          # 3) Vervang changelog
          mv CHANGELOG.new CHANGELOG.md

      - name: Commit CHANGELOG only
        run: |
          git add CHANGELOG.md
          git commit -m "[skip ci] 🔖 ${{ steps.version.outputs.version }} release" || echo "No Changes"
          git push origin HEAD:main

      - name: Create & push tag (vX.Y.Z)
        run: |
          git tag -a "${{ steps.version.outputs.version }}" -m "Release ${{ steps.version.outputs.version }}"
          git push origin "refs/tags/${{ steps.version.outputs.version }}"
