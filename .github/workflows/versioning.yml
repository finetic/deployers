---
name: Version & Tagging

on:
  workflow_call:

jobs:
  tag_and_changelog:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Fetch full git history (for push validation)
        if: github.event_name == 'push'
        run: git fetch --prune --unshallow || echo "Already complete history"

      - name: Validate semantic commits (pull request)
        if: github.event_name == 'pull_request'
        uses: amannn/action-semantic-pull-request@v5
        with:
          types: |
            feat
            fix
            chore
            docs
            refactor
            style
            test

      - name: Get version from VERSION file
        id: version
        run: |
          if [ ! -f VERSION ]; then
            echo "❌ VERSION file not found!"
            exit 1
          fi
          VERSION=$(cat VERSION | tr -d '\n')
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ VERSION must be in format x.y.z"
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if tag already exists
        run: |
          TAG="v${{ steps.version.outputs.version }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "❌ Tag $TAG already exists!"
            exit 1
          fi

      - name: Ensure CHANGELOG.md exists
        run: |
          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
          fi

      - name: Generate changelog from commits (nieuwste eerst, alles gesorteerd)
        run: |
          # 1. Bouw de nieuwe sectie
          echo "# Changelog" > changelog_new.md
          echo -e "\n## v${{ steps.version.outputs.version }} - $(date '+%Y-%m-%d')" >> changelog_new.md
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 2>/dev/null || echo "")..HEAD \
            | grep -vi '\[skip ci\]' >> changelog_new.md || true

          # 2. Pak oude secties zonder kopregel
          if [ -f CHANGELOG.md ]; then
            # Sla eerste regel (# Changelog) over
            tail -n +2 CHANGELOG.md > _old_changelog.md

            # Splits bestaande changelog in blokken op '## v', prepend deze met '## v'
            awk -v RS='\n## v' -v ORS='' 'NR>1{print "## v"$0}' _old_changelog.md > _split.md

            # Sorteer alle blokken op versieheader, van nieuw naar oud
            csplit -f section_ -b "%03d.md" _split.md '/^## v/' '{*}'
            ls section_*.md | sort -r > sections_sorted.txt

            # Zet alle gesorteerde blokken achter elkaar
            while read sec; do cat "$sec"; echo; done < sections_sorted.txt >> changelog_new.md

            # Ruim op
            rm _old_changelog.md _split.md section_*.md sections_sorted.txt 2>/dev/null || true
          fi

          # 3. Vervang changelog
          mv changelog_new.md CHANGELOG.md

      - name: Commit & Tag
        run: |
          git add CHANGELOG.md
          git commit -m "🔖 ${{ steps.version.outputs.version }} release"
          git tag -a "${{ steps.version.outputs.version }}" -m "Release ${{ steps.version.outputs.version }}"
          git push origin HEAD --follow-tags
